{"version":3,"sources":["components/renderPhotos.js","components/nextButton.js","components/sliderView.js","App.js","serviceWorker.js","index.js"],"names":["renderPhoto","props","className","src","element","slug","alt","onClick","clickDownload","download","nextPhotos","id","clickButton","SliderView","state","Urls","UrlDisplayed","WholeArray","displayedSlugs","fetch","then","res","json","data","urls","map","photo","url","slice","lastIndexOf","download_url","forEach","item","i","setState","newElement","shift","push","catch","error","console","log","this","response","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","downloadURL","Axios","method","responseType","urlsToRender","e","key","downloadFoto","bind","button","nextImages","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b042fb4f.chunk.js","sourcesContent":["import React from 'react'\r\nimport './renderPhotos.css'\r\nimport './buttons.css'\r\n\r\nconst renderPhoto = props => {\r\n    return (<li className=\"photo\">\r\n                <div className=\"imageWrapper\">\r\n                    <img src={`http://source.unsplash.com/${props.element.slug}`} className=\"imgInSlide\" alt=\"\" /> \r\n                    <div className=\"imageOverlay\">\r\n                        <button onClick={() => props.clickDownload(props.element.download, props.element.slug)}>Download</button>\r\n                    </div>\r\n                </div>\r\n            </li>)\r\n}\r\n\r\nexport default renderPhoto;","import React from 'react'\r\nimport './buttons.css'\r\n\r\nconst nextPhotos = props => {\r\n    return(\r\n        <div id=\"buttonWrapper\">\r\n            <button id=\"next\" onClick={() => props.clickButton()}>Next</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default nextPhotos;","import React from 'react'\r\nimport RenderPhotos from './renderPhotos'\r\nimport NextButton from './nextButton'\r\nimport './sliderView.css'\r\nimport Axios from 'axios'\r\n\r\nclass SliderView extends React.Component {\r\n    state = {\r\n        Urls: [],\r\n        UrlDisplayed: [],\r\n        WholeArray: []\r\n    }\r\n\r\n    componentDidMount(){          \r\n        const displayedSlugs = [];\r\n        \r\n        fetch('https://picsum.photos/v2/list')\r\n        .then(res => res.json())\r\n        .then(data =>  {\r\n        const urls = data.map(photo =>\r\n                ({\r\n                    id: photo.id,\r\n                    slug: (photo.url).slice(photo.url.lastIndexOf('/') + 1),\r\n                    download: photo.download_url\r\n                })\r\n            );      \r\n            urls.forEach((item, i) => {\r\n                item.id = i++;\r\n            }); \r\n            this.setState({WholeArray: [...urls]})\r\n\r\n            for (let i = 0; i < 3; i++) {\r\n                let newElement = urls.shift();\r\n                displayedSlugs.push(newElement);\r\n            };\r\n            this.setState({Urls: urls}); \r\n            this.setState({UrlDisplayed: displayedSlugs});    \r\n            \r\n        })\r\n        .catch(error => console.log(error))   \r\n    }\r\n\r\n    nextImages(){\r\n        const displayedSlugs = [];\r\n        \r\n        const urls = this.state.Urls\r\n        for (let i = 0; i < 3; i++) {\r\n            let newElement = urls.shift();\r\n            displayedSlugs.push(newElement);\r\n        }\r\n        this.setState({Urls: urls}); \r\n        this.setState({UrlDisplayed: displayedSlugs}); \r\n    \r\n        if (urls <=0){\r\n            this.setState({Urls: [...this.state.WholeArray]}) ;\r\n        }\r\n    }\r\n\r\n    download(response, slug){\r\n        const url = window.URL.createObjectURL(new Blob([response.data]))\r\n        const link = document.createElement('a')\r\n        link.href = url\r\n        link.setAttribute('download', `${slug}.png`)\r\n        document.body.appendChild(link)\r\n        link.click()\r\n    }\r\n\r\n    downloadFoto (downloadURL, slug){\r\n      Axios({\r\n        method: 'get',\r\n        url: downloadURL,\r\n        responseType: 'arraybuffer'\r\n      })\r\n      .then(response => {\r\n        this.download(response, slug)  \r\n      })\r\n      .catch(() => console.log('error'))\r\n    }\r\n\r\n    render () {        \r\n        const urlsToRender = this.state.UrlDisplayed.map(e => {\r\n            return <RenderPhotos element={e}  key={e.id} clickDownload={this.downloadFoto.bind(this)} />\r\n        })\r\n        const button = <NextButton clickButton={this.nextImages.bind(this)} />\r\n        \r\n        return (\r\n            <main id=\"sliderView\">\r\n                <ul>\r\n                    {urlsToRender} \r\n                </ul>\r\n                {button}\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SliderView;","import React from 'react';\nimport SliderView from './components/sliderView'\n/* import logo from './logo.svg';\n */import './App.css';\n\nfunction App() {\n  return <SliderView />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}